/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.16
 * Generated at: 2023-11-16 05:45:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.ArrayList;
import java.util.List;
import AcessoADados.Cliente;
import java.time.LocalDate;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("AcessoADados.Cliente");
    _jspx_imports_classes.add("java.time.LocalDate");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>Página de Testes JSP</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        <h1>Exercícios JSP</h1>\n");
      out.write("\n");
      out.write("        <h2 id=\"index1\">Exemplo escreve na página os números de 0 a 10 verticalmente</h2>\n");
      out.write("        <p>\n");
      out.write("            ");

                for (int i = 0; i <= 10; i++) {
                    out.println(i + "<br>");
                }
            
      out.write("\n");
      out.write("        </p>\n");
      out.write("\n");
      out.write("        <br>\n");
      out.write("        <h3><a href=\"index1.jsp\">index1.jsp</a></h3>\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("        <h2 id=\"index2\">Exemplo escreve a frase \"Olá mundo JAVA JSP\" 6 vezes, cada vez usando uma tag de cabeçalho html diferente (H1 a H6) ordem crescente de tamanho  'q</h2>\n");
      out.write("\n");
      out.write("        ");

            String mensagem = "Olá mundo JAVA JSP";
            for (int i = 6; i >= 1; i--) {
                out.println("<h" + i + ">" + mensagem + "</h" + i + ">");
            }
        
      out.write("\n");
      out.write("\n");
      out.write("        <br>\n");
      out.write("        <h3><a href=\"index2.jsp\">index2.jsp</a></h3>\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("        <h2 id=\"index3\">Exemplo onde são consultados e armazanados o dia, o mes e o ano (data do servidor) e, posteriormente, os valores dessas variáveis são exibidas dentro da estrutura do html</h2>\n");
      out.write("\n");
      out.write("        ");

            LocalDate dataHoje = LocalDate.now();

            int dia = dataHoje.getDayOfMonth();
            int mes = dataHoje.getMonthValue();
            int ano = dataHoje.getYear();
        
      out.write("\n");
      out.write("\n");
      out.write("        <h4>Data obtida no Computador Servidor</h4>\n");
      out.write("        Dia: <b> ");
      out.print( dia);
      out.write(" </b><br>\n");
      out.write("        Mês: <b> ");
      out.print( mes);
      out.write(" </b><br>\n");
      out.write("        Ano: <b> ");
      out.print( ano);
      out.write(" </b><br>\n");
      out.write("\n");
      out.write("        <br>\n");
      out.write("        <h3><a href=\"index3.jsp\">index3.jsp</a></h3>\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("        <h2 id=\"index4\">Exemplo escreve na página os números de 0 a 10 verticalmente (com lista não ordenada)</h2>\n");
      out.write("\n");
      out.write("        <ul>\n");
      out.write("            ");

                for (int i = 0; i <= 10; i++) {
                    out.println("<li>" + i + "</li>");
                }
            
      out.write("\n");
      out.write("        </ul>\n");
      out.write("\n");
      out.write("        <br>\n");
      out.write("        <h3><a href=\"index4.jsp\">index4.jsp</a></h3>\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("        <h2 id=\"index5\">Exemplo escreve na página a tabuada de 6 (multiplicando de 0 a 10) verticalmente (com lista ordenada)</h2>\n");
      out.write("\n");
      out.write("        <ol>\n");
      out.write("            ");

                int numero = 6;
                for (int i = 0; i <= 10; i++) {
                    out.println("<li>" + numero + " x " + i + " = " + numero * i + "</li>");
                }
            
      out.write("\n");
      out.write("        </ol>\n");
      out.write("\n");
      out.write("        <br>\n");
      out.write("        <h3><a href=\"index5.jsp\">index5.jsp</a></h3>\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("        <h2 id=\"index6\">Exemplo gerando uma tabela html dinamicamente com dados de clientes oriundos de uma matriz</h2>\n");
      out.write("\n");
      out.write("        ");

            String[][] clientes = {
                {"1", "João da Silva", "123.456.789-00", "joao@email.com"},
                {"2", "Maria Oliveira", "987.654.321-00", "maria@email.com"},
                {"3", "José Pereira", "111.222.333-44", "jose@email.com"}
            };
        
      out.write("\n");
      out.write("\n");
      out.write("        <table border=\"1\">\n");
      out.write("            ");

                out.println("<tr>");

                out.println("<th>ID</th>");
                out.println("<th>NOME</th>");
                out.println("<th>CPF</th>");
                out.println("<th>E-MAIL</th>");

                out.println("</tr>");

                for (String[] cliente : clientes) {
                    out.println("<tr>");

                    out.println("<td>" + cliente[0] + "</td>");
                    out.println("<td>" + cliente[1] + "</td>");
                    out.println("<td>" + cliente[2] + "</td>");
                    out.println("<td>" + cliente[3] + "</td>");

                    out.println("</tr>");
                }
            
      out.write("\n");
      out.write("        </table>\n");
      out.write("\n");
      out.write("        <br>\n");
      out.write("        <h3><a href=\"index6.jsp\">index6.jsp</a></h3>\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("        <h2 id=\"index7\">Exemplo gerando uma tabela html dinamicamente com dados de clientes oriundos de uma lista de clientes (classe Cliente que está em outro pacote)</h2>\n");
      out.write("\n");
      out.write("        ");

            List<Cliente> listaDeClientes = new ArrayList<>();

            listaDeClientes.add(new Cliente(1, "João de Souza", "123.456.789-00", "joao@email.com"));
            listaDeClientes.add(new Cliente(2, "Maria Melo", "987.654.321-00", "maria@email.com"));
            listaDeClientes.add(new Cliente(3, "José Santos", "111.222.333-44", "jose@email.com"));
        
      out.write("\n");
      out.write("\n");
      out.write("        <table border=\"1\">\n");
      out.write("            ");

                out.println("<tr>");

                out.println("<th>ID</th>");
                out.println("<th>NOME</th>");
                out.println("<th>CPF</th>");
                out.println("<th>E-MAIL</th>");

                out.println("</tr>");

                for (Cliente cliente : listaDeClientes) {
                    out.println("<tr>");

                    out.println("<td>" + cliente.getId() + "</td>");
                    out.println("<td>" + cliente.getNome() + "</td>");
                    out.println("<td>" + cliente.getCpf() + "</td>");
                    out.println("<td>" + cliente.getEmail() + "</td>");

                    out.println("</tr>");
                }
            
      out.write("\n");
      out.write("        </table>\n");
      out.write("\n");
      out.write("        <br>\n");
      out.write("        <h3><a href=\"index7.jsp\">index7.jsp</a></h3>\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
